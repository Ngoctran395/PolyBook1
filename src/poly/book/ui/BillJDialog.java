/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.book.ui;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lombok.Setter;
import poly.book.dao.BillController;
import poly.book.dao.BillDAO;
import poly.book.dao.BillDetailDAO;
import poly.book.dao.BookDAO;
import poly.book.dao.CategoryDAO;
import poly.book.dao.CustomerDAO;
import poly.book.dao.impl.BillDAOImpl;
import poly.book.dao.impl.BillDetailDAOImpl;
import poly.book.dao.impl.BookDAOImpl;
import poly.book.dao.impl.CategoryDAOImpl;
import poly.book.dao.impl.CustomerDAOImpl;
import poly.book.entity.Bill;
import poly.book.entity.BillDetail;
import poly.book.entity.Book;
import poly.book.entity.Category;
import poly.book.entity.Customer;
import poly.book.ui.manager.CustomerManagerJDialog;
import poly.book.util.XAuth;
import poly.book.util.XDate;

/**
 *
 * @author Dell
 */
public class BillJDialog extends javax.swing.JDialog implements BillController {

    private Customer selectedCustomer;

    /**
     * Creates new form BillJDialog
     */
    public BillJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtBillID = new javax.swing.JTextField();
        txtStatus = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        txtCheckout = new javax.swing.JTextField();
        txtCheckin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBillDetail = new javax.swing.JTable();
        btnDeleteSelected = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnAddCustomer = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Mã phiếu");

        jLabel3.setText("Thời điểm tạo");

        jLabel4.setText("Thời điểm thanh toán");

        jLabel5.setText("Trạng thái");

        jLabel6.setText("Người tạo");

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Loại sách"
            }
        ));
        tblCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategory);

        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã", "Tên sách", "Tác giả", "Giá", "Số lượng còn"
            }
        ));
        tblBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblBook);

        tblBillDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn", "Tên sách", "SDT khách hàng", "Đơn giá", "Số lượng", "Thành tiền", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBillDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillDetailMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblBillDetail);

        btnDeleteSelected.setText("Xóa dòng đã chọn");
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });

        btnCancel.setText("Hủy hóa đơn");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnCheckout.setText("Thanh toán");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnAddCustomer.setText("Thêm khách hàng");
        btnAddCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustomerActionPerformed(evt);
            }
        });

        lblTotal.setForeground(new java.awt.Color(255, 51, 51));
        lblTotal.setText("Tổng tiền:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtBillID, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jScrollPane2))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddCustomer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteSelected)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel)
                                .addGap(18, 18, 18)
                                .addComponent(btnCheckout)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(82, 82, 82))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(txtBillID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(lblTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteSelected)
                    .addComponent(btnCancel)
                    .addComponent(btnCheckout)
                    .addComponent(btnAddCustomer))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void tblBillDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillDetailMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tblBillDetailMouseClicked

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblBillDetail.getModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            Boolean checked = (Boolean) model.getValueAt(i, 6);
            if (checked != null && checked) {
                billDetails.remove(i);
            }
        }
        refreshBillDetailTable();
    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "Xác nhận hủy hóa đơn?") == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        int row = tblBook.getSelectedRow();
        Book selectedBook = books.get(row);
        double total = 0;
        for (BillDetail d : billDetails) {
            if(selectedBook.getBookID().equals(d.getBookID())){
                
            }
            total += d.getUnitPrice() * d.getQuantity();
        }

        if (customer != null && total >= 500000) {
            total *= 0.95;
            customer.setLoyal(true);
            customer.setPurchaseCount(customer.getPurchaseCount() + 1);
            customerDao.update(customer);
        }

        bill = new Bill();
        bill.setUsername(XAuth.user.getUsername());
        bill.setCheckin(new Date());
        bill.setCheckout(new Date());
        bill.setStatus(1);
        if (customer != null) {
            bill.setCustomerID(customer.getCustomerID());
        }
        billDao.create(bill);

        for (BillDetail detail : billDetails) {
            detail.setBillID(bill.getBillID());
            billDetailDao.create(detail);
        }

        JOptionPane.showMessageDialog(this, "Thanh toán thành công. Tổng tiền: " + total);
        this.dispose();
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnAddCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustomerActionPerformed
        CustomerManagerJDialog dialog = new CustomerManagerJDialog((java.awt.Frame) this.getOwner(), true);

        dialog.setVisible(true);

        Customer selected = dialog.getSelectedCustomer();
        if (selected != null) {
            this.selectedCustomer = selected;
            bill.setCustomerID(selected.getCustomerID());

            JOptionPane.showMessageDialog(this,
                    "Đã chọn khách hàng:\nTên: " + selected.getCustomerName()
                    + "\nSĐT: " + selected.getPhone()
                    + "\nTrạng thái: " + (selected.isLoyal() ? "Thân thiết" : "Bình thường"));
        }
    }//GEN-LAST:event_btnAddCustomerActionPerformed

    private void tblBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int row = tblBook.getSelectedRow();
            if (row >= 0) {
                Book selectedBook = books.get(row);
                String input = JOptionPane.showInputDialog(this, "Nhập số lượng muốn mua:");
                try {
                    int quantity = Integer.parseInt(input);
                    if (quantity > 0 && quantity <= selectedBook.getStockQuantity()) {
                        addToBillDetail(selectedBook, quantity);
                    } else {
                        JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ!");
                }
            }
        };

    }//GEN-LAST:event_tblBookMouseClicked

    private void tblCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoryMouseClicked
        // TODO add your handling code here:
        this.fillBook();
    }//GEN-LAST:event_tblCategoryMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BillJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                BillJDialog dialog = new BillJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    @Setter
    private Bill bill;
    private final BillDetailDAO billDetailDao = new BillDetailDAOImpl();
    private final BillDAO billDao = new BillDAOImpl();
    private final CategoryDAO categoryDao = new CategoryDAOImpl();
    private final BookDAO bookDao = new BookDAOImpl();
    private final CustomerDAO customerDao = new CustomerDAOImpl();

    private List<BillDetail> billDetails = new ArrayList<>();
    private List<Category> categories = new ArrayList<>();
    private List<Book> books = new ArrayList<>();
    private Customer customer;

    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategory();
        this.fillBook();
    }

    @Override
    public void close() {
        if (billDetails.isEmpty() && bill != null) {
            billDao.deleteById(bill.getBillID());
        }
    }

    void setForm(Bill bill) {
        // Thiết lập các text field chỉ đọc
        txtBillID.setEditable(false);
        txtCheckin.setEditable(false);
        txtUserName.setEditable(false);
        txtStatus.setEditable(false);
        txtCheckout.setEditable(false);

        if (bill == null) {
            txtBillID.setText("Mã phiếu chưa xác định");
            txtCheckin.setText("-");
            txtUserName.setText("-");
            txtStatus.setText("-");
            txtCheckout.setText("-");
            btnAddCustomer.setEnabled(false);
            btnCancel.setEnabled(false);
            btnCheckout.setEnabled(false);
            return;
        }

        txtBillID.setText(String.valueOf(bill.getBillID()));
        txtCheckin.setText(XDate.format(bill.getCheckin(), "HH:mm:ss dd-MM-yyyy"));
        txtUserName.setText(bill.getUsername());

        String[] statuses = {"Servicing", "Completed", "Canceled"};
        txtStatus.setText(statuses[bill.getStatus()]);

        if (bill.getCheckout() != null) {
            txtCheckout.setText(XDate.format(bill.getCheckout(), "HH:mm:ss dd-MM-yyyy"));
        } else {
            txtCheckout.setText("-");
        }

    }

    public void fillCategory() {
        categories = categoryDao.findAll();
        DefaultTableModel model = (DefaultTableModel) tblCategory.getModel();
        model.setRowCount(0);
        for (Category category : categories) {
            model.addRow(new Object[]{category.getCategoryName()});
        }
        if (!categories.isEmpty()) {
            tblCategory.setRowSelectionInterval(0, 0);
        }
    }

    public void fillBook() {
        int selectedRow = tblCategory.getSelectedRow();
        if (selectedRow < 0 || selectedRow >= categories.size()) {
            return;
        }

        Category category = categories.get(selectedRow);
        books = bookDao.findByCategoryId(category.getCategoryID());
        DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
        model.setRowCount(0);

        for (Book book : books) {
            model.addRow(new Object[]{
                book.getBookID(),
                book.getBookName(),
                book.getAuthor(),
                book.getPrice(),
                book.getStockQuantity()
            });
        }
    }

    private void addToBillDetail(Book book, int quantity) {
        BillDetail detail = new BillDetail();
        detail.setBookID(book.getBookID());
        detail.setQuantity(quantity);
        detail.setUnitPrice(book.getPrice());
        billDetails.add(detail);
        refreshBillDetailTable();
    }

    private void refreshBillDetailTable() {
        DefaultTableModel model = (DefaultTableModel) tblBillDetail.getModel();
        model.setRowCount(0);
        double total = 0;
        for (BillDetail detail : billDetails) {
            Book book = bookDao.findById(detail.getBookID());
            double lineTotal = detail.getQuantity() * detail.getUnitPrice();
            total += lineTotal;

            model.addRow(new Object[]{
                bill != null ? bill.getBillID() : "",
                book.getBookName(),
                customer != null ? customer.getPhone() : "",
                detail.getUnitPrice(),
                detail.getQuantity(),
                lineTotal,
                false
            });
        }
        lblTotal.setText("Tổng tiền: " + total);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCustomer;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblBillDetail;
    private javax.swing.JTable tblBook;
    private javax.swing.JTable tblCategory;
    private javax.swing.JTextField txtBillID;
    private javax.swing.JTextField txtCheckin;
    private javax.swing.JTextField txtCheckout;
    private javax.swing.JTextField txtStatus;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setBill(Bill bill) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void updateQuantity() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void showBillJDialog() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void removeBills() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void checkout() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void cancel() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
