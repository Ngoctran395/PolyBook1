/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package poly.book.ui.manager;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import poly.book.dao.BookController;
import poly.book.dao.BookDAO;
import poly.book.dao.CategoryDAO;
import poly.book.dao.impl.BookDAOImpl;
import poly.book.dao.impl.CategoryDAOImpl;
import poly.book.entity.Bill;
import poly.book.entity.Book;
import poly.book.entity.Category;
import poly.book.util.XDialog;

/**
 *
 * @author Dell
 */

public class BookManagerJDialog extends javax.swing.JDialog implements BookController{
 private List<Category> category;
 NumberFormat vnFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
    /**
     * Creates new form BookManagerJDialog
     */
    public BookManagerJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTableHeaderColor();
    }
 private void setTableHeaderColor() {
        // Đổi màu cho tblCategory
        JTableHeader header1 = tblCategory.getTableHeader();
        header1.setForeground(Color.BLUE);
        header1.setFont(new Font("Segoe UI", Font.BOLD, 13));

        // Đổi màu cho tableBooks
        JTableHeader header2 = tblBook.getTableHeader();
        header2.setForeground(Color.BLUE);
        header2.setFont(new Font("Segoe UI", Font.BOLD, 13));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        btnStatus = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategory = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        pnlImageBook = new poly.book.component.ImageJPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBookId = new javax.swing.JTextField();
        txtStockQuantity = new javax.swing.JTextField();
        txtBookName = new javax.swing.JTextField();
        txtAuthor = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        cboCategory = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        rdoAvailable = new javax.swing.JRadioButton();
        rdoUnavailable = new javax.swing.JRadioButton();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnMovePrevious = new javax.swing.JButton();
        btnMoveNext = new javax.swing.JButton();
        btnMoveLast = new javax.swing.JButton();
        btnChooseFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Thể loại sách"
            }
        ));
        tblCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCategoryMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblCategoryMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tblCategory);

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã sách", "Tên sách", "Tác giả", "Đơn giá", "Số lượng", "Trạng thái", "Hình ảnh", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblBook);

        jLabel1.setText("ĐIỀN THÔNG TIN SÁCH");

        jLabel2.setText("Mã sách");

        jLabel3.setText("Đơn giá");

        jLabel4.setText("Số lượng");

        jLabel5.setText("Tác giả");

        jLabel6.setText("Tên sách");

        jLabel7.setText("Thể loại");

        cboCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sách CNTT", "Sách KHTN", "Sách KinhTe-QuanTri", "Sách Kỹ năng mềm", "Sách Ngoại Ngữ", "Tiểu thuyết", " " }));

        jLabel8.setText("Trạng thái");

        btnStatus.add(rdoAvailable);
        rdoAvailable.setText("Còn hàng");

        btnStatus.add(rdoUnavailable);
        rdoUnavailable.setText("Hết hàng");
        rdoUnavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoUnavailableActionPerformed(evt);
            }
        });

        btnCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/Add.png"))); // NOI18N
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/Edit.png"))); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/Delete.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/Refresh.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnMoveFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/previous last.png"))); // NOI18N
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnMovePrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/previous.png"))); // NOI18N
        btnMovePrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovePreviousActionPerformed(evt);
            }
        });

        btnMoveNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/next.png"))); // NOI18N
        btnMoveNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveNextActionPerformed(evt);
            }
        });

        btnMoveLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/poly/book/icons/Icon Application/Icon Application/next last.png"))); // NOI18N
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        btnChooseFile.setText("Chọn");
        btnChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(pnlImageBook, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(89, 89, 89)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(282, 282, 282)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(17, 17, 17)
                                                .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtBookId, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)
                                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtStockQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                            .addComponent(cboCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(rdoAvailable)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rdoUnavailable))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnChooseFile)
                                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMoveFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnMovePrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnMoveNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnMoveLast, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7)
                            .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBookId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(cboCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStockQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(rdoAvailable)
                            .addComponent(rdoUnavailable)))
                    .addComponent(pnlImageBook, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChooseFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnMoveFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMovePrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMoveLast, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMoveNext, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdoUnavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoUnavailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdoUnavailableActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.open();
    }//GEN-LAST:event_formWindowOpened

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        this.update();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.delete();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        this.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
        // TODO add your handling code here:
        this.moveFirst();
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMovePreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovePreviousActionPerformed
        // TODO add your handling code here:
        this.movePrevious();
    }//GEN-LAST:event_btnMovePreviousActionPerformed

    private void btnMoveNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveNextActionPerformed
        // TODO add your handling code here:
        this.moveNext();
    }//GEN-LAST:event_btnMoveNextActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
        // TODO add your handling code here:
        this.moveLast();
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void tblCategoryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoryMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tblCategoryMouseEntered

    private void tblCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCategoryMouseClicked
        // TODO add your handling code here:
         int row = tblBook.rowAtPoint(evt.getPoint());
    int col = tblBook.columnAtPoint(evt.getPoint());
    int cbCol = tblBook.getColumnCount() - 1; // cột cuối là checkbox "Chọn"

    if (row >= 0 && col != cbCol) {
        // Nếu click không phải ô checkbox thì chỉ fill form, KHÔNG đánh dấu checkbox
        tblBook.setRowSelectionInterval(row, row);
        this.edit();
    }
    }//GEN-LAST:event_tblCategoryMouseClicked

    private void btnChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseFileActionPerformed
        // TODO add your handling code here:
        this.chooseFile();
    }//GEN-LAST:event_btnChooseFileActionPerformed

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void tblBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMouseClicked
        // TODO add your handling code here:
        this.addDoubleClickEventToTable();
    }//GEN-LAST:event_tblBookMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(BookManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(BookManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(BookManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(BookManagerJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
        @Override
        public void run() {
            BookManagerJDialog dialog = new BookManagerJDialog(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        }
    });
}
      BookDAO dao = new BookDAOImpl();
    List<Book> items = new ArrayList<>();

 
    @Override
    public void open() {
        this.setLocationRelativeTo(null);
        this.fillCategory();
        this.fillToTable();
        this.clear();

        // Thêm renderer hiển thị ảnh ở cột 5
        tblBook.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer() {
         
            @Override
            public void setValue(Object value) {
                if (value instanceof ImageIcon) {
                    setIcon((ImageIcon) value);
                    setText("");
                } else {
                    setIcon(null);
                    setText(value != null ? value.toString() : "");
                }
            }
        });

        tblCategory.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                fillToTable(); // mỗi lần chọn dòng loại khác, cập nhật bảng đồ uống
            }
        });
    }

   
    public void fillCategory() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboCategory.getModel();
        cboModel.removeAllElements();

        DefaultTableModel tblModel = (DefaultTableModel) tblCategory.getModel();
        tblModel.setRowCount(0);

        CategoryDAO cdao = new CategoryDAOImpl();
        category = cdao.findAll();

        category.forEach(category -> {
            cboModel.addElement(category);
            tblModel.addRow(new Object[]{category.getCategoryName()});
        });

        if (!category.isEmpty()) {
            tblCategory.setRowSelectionInterval(0, 0);
        }
    }


   public void chooseFile() {
    JFileChooser fileChooser = new JFileChooser();
    int result = fileChooser.showOpenDialog(null);

    if (result == JFileChooser.APPROVE_OPTION) {
        File file = fileChooser.getSelectedFile();
        ImageIcon icon = new ImageIcon(file.getAbsolutePath());

        SwingUtilities.invokeLater(() -> {
            int w = pnlImageBook.getWidth();
            int h = pnlImageBook.getHeight();
            if (w == 0 || h == 0) {
                w = 150;
                h = 150;
            }
            Image img = icon.getImage().getScaledInstance(w, h, Image.SCALE_SMOOTH);
            pnlImageBook.setImage(img); // 🟢 Thay setIcon bằng setImage
        });

        pnlImageBook.setToolTipText(file.getName()); // lưu tên ảnh
    }
}

 @Override
public void fillToTable() {
    DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
    model.setRowCount(0);

    int selectedRow = tblCategory.getSelectedRow();
    if (selectedRow < 0 || selectedRow >= category.size()) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một thể loại trước.");
        return;
    }

    Category category = this.category.get(selectedRow);
    items = dao.findByCategoryId(category.getCategoryID());

    for (Book item : items) {
        ImageIcon icon = null;
        try {
            File file = new File("images", item.getImageBook());
            if (file.exists()) {
                Image img = new ImageIcon(file.getAbsolutePath()).getImage().getScaledInstance(80, 80, Image.SCALE_SMOOTH);
                icon = new ImageIcon(img);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        String priceText = vnFormat.format(item.getPrice());

        model.addRow(new Object[]{
            item.getBookID(),
            item.getBookName(),
            item.getAuthor(),
            priceText,
            item.getStockQuantity(),
            item.isAvailable() ? "Còn hàng" : "Hết hàng",
            icon != null ? icon : item.getImageBook(),
            Boolean.FALSE
        });
    }

    clear();
}

 @Override
    public void checkAll() {
        setCheckedAll(true);
    }

 @Override
    public void uncheckAll() {
        setCheckedAll(false);
    }

    private void setCheckedAll(boolean checked) {
        int checkboxColumn = 6; // vị trí checkbox trong bảng tblDrinks
        for (int i = 0; i < tblBook.getRowCount(); i++) {
            tblBook.setValueAt(checked, i, checkboxColumn);
        }
    }

 @Override
    public void deleteCheckedItems() {
        int checkboxColumn = 6;

        if (XDialog.confirm("Bạn thực sự muốn xóa các mục chọn?")) {
            for (int i = tblBook.getRowCount() - 1; i >= 0; i--) {
                Boolean checked = (Boolean) tblBook.getValueAt(i, checkboxColumn);
                if (checked != null && checked) {
                    String drinkId = (String) tblBook.getValueAt(i, 0);
                    dao.deleteById(drinkId);
                }
            }
            this.fillToTable();
        }
    }
@Override
public Book getForm() {
    try {
        String bookId = txtBookId.getText().trim();
        String bookName = txtBookName.getText().trim();
        String author = txtAuthor.getText().trim();
        String priceText = txtPrice.getText().trim();
        String stockText = txtStockQuantity.getText().trim();

        if (bookId.isEmpty() || bookName.isEmpty() || author.isEmpty() || priceText.isEmpty() || stockText.isEmpty()) {
            XDialog.alert("Vui lòng nhập đầy đủ thông tin!");
            return null;
        }

        priceText = priceText.replaceAll("[^\\d]", "");
        stockText = stockText.replaceAll("[^\\d]", "");

        double price = Double.parseDouble(priceText);
        int stock = Integer.parseInt(stockText);

        Book b = new Book();
        b.setBookID(bookId);
        b.setBookName(bookName);
        b.setAuthor(author);
        b.setPrice(price);
        b.setStockQuantity(stock);

        b.setAvailable(rdoAvailable.isSelected());

        Category selected = (Category) cboCategory.getSelectedItem();
        if (selected == null) {
            XDialog.alert("Vui lòng chọn thể loại");
            return null;
        }
        b.setCategoryID(selected.getCategoryID());

        String imageFile = pnlImageBook.getToolTipText();
        b.setImageBook(imageFile != null && !imageFile.isEmpty() ? imageFile : "default.png");

        return b;
    } catch (NumberFormatException e) {
        XDialog.alert("Đơn giá hoặc số lượng không hợp lệ!");
        return null;
    } catch (Exception e) {
        XDialog.alert("Lỗi nhập liệu: " + e.getMessage());
        return null;
    }
}

@Override
public void setForm(Book b) {
    txtBookId.setText(b.getBookID());
    txtBookName.setText(b.getBookName());
    txtAuthor.setText(b.getAuthor());
    txtPrice.setText(vnFormat.format(b.getPrice()));
    txtStockQuantity.setText(String.valueOf(b.getStockQuantity()));

    if (b.isAvailable()) {
        rdoAvailable.setSelected(true);
    } else {
        rdoUnavailable.setSelected(true);
    }

    // Ảnh
    if (b.getImageBook() != null && !b.getImageBook().isEmpty()) {
        File file = new File("images", b.getImageBook());
        if (file.exists()) {
            ImageIcon icon = new ImageIcon(file.getAbsolutePath());
            Image img = icon.getImage().getScaledInstance(pnlImageBook.getWidth(), pnlImageBook.getHeight(), Image.SCALE_SMOOTH);
            pnlImageBook.setImage(img); // set hình vào JPanel tùy chỉnh
            pnlImageBook.setToolTipText(file.getName()); // lưu tên để khi cập nhật
        } else {
            pnlImageBook.setImage(null);
            pnlImageBook.setToolTipText(null);
        }
    } else {
        pnlImageBook.setImage(null);
        pnlImageBook.setToolTipText(null);
    }

   for (int i = 0; i < cboCategory.getItemCount(); i++) {
        Object item = cboCategory.getItemAt(i);
        if (item instanceof Category c) {
            if (c.getCategoryID().equals(b.getCategoryID())) {
                cboCategory.setSelectedIndex(i);
                break;
            }
        }
    }
}




 @Override
    public void edit() {
        int row = tblBook.getSelectedRow();
        if (row >= 0 && row < items.size()) {
            setForm(items.get(row));
            setEditable(true);
        } else {
            XDialog.alert("Vui lòng chọn một bản ghi hợp lệ để chỉnh sửa");
        }
    }
 @Override
    public void create() {
        try {
            Book entity = getForm();
            if (entity == null) {
                JOptionPane.showMessageDialog(this, "Dữ liệu không hợp lệ.");
                return;
            }

            dao.create(entity);  // Thêm sản phẩm vào database

            // ✅ Đảm bảo chọn đúng danh mục chứa sản phẩm mới
            for (int i = 0; i < category.size(); i++) {
                if (category.get(i).getCategoryID().equals(entity.getCategoryID())) {
                    tblCategory.setRowSelectionInterval(i, i);
                    break;
                }
            }

            fillToTable(); // Hiển thị lại bảng với danh mục đang chọn
            clear();       // Xóa form nhập liệu
            JOptionPane.showMessageDialog(this, "Tạo đồ uống thành công!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm: " + ex.getMessage());
            ex.printStackTrace();
        }
    }


 @Override
    public void update() {
        try {
            Book entity = getForm();
            if (entity == null) {
                return;
            }

            dao.update(entity);
            fillToTable();
            JOptionPane.showMessageDialog(this, "Cập nhật thành công!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

 @Override
    public void delete() {
        if (XDialog.confirm("Bạn thực sự muốn xóa?")) {
            try {
                String id = txtBookId.getText().trim();
                dao.deleteById(id);

                fillToTable();
                clear();
            } catch (NumberFormatException e) {
                XDialog.alert("Mã ID không hợp lệ!");
            } catch (Exception ex) {
                XDialog.alert("Lỗi khi xóa: " + ex.getMessage());
                ex.printStackTrace();
            }
        }
    }

@Override
public void clear() {
    txtBookId.setText("");
    txtBookName.setText("");
    txtAuthor.setText("");
    txtPrice.setText("");
    txtStockQuantity.setText("");

    btnStatus.clearSelection();
    rdoAvailable.setSelected(true);

    if (cboCategory.getItemCount() > 0) {
        cboCategory.setSelectedIndex(0);  // chọn mục đầu tiên
    } else {
        cboCategory.setSelectedIndex(-1);
    }

    pnlImageBook.setImage(null);
    pnlImageBook.setToolTipText(null);

    setEditable(false);
}


 @Override
   public void setEditable(boolean editable) {
    txtBookId.setEnabled(!editable);
    btnCreate.setEnabled(!editable);
    btnUpdate.setEnabled(editable);
    btnDelete.setEnabled(editable);
}



 @Override
    public void moveFirst() {
        moveTo(0);
    }

 @Override
    public void movePrevious() {
        moveTo(tblBook.getSelectedRow() - 1);
    }

 @Override
    public void moveNext() {
        moveTo(tblBook.getSelectedRow() + 1);
    }

 @Override
    public void moveLast() {
        moveTo(tblBook.getRowCount() - 1);
    }

 @Override
    public void moveTo(int index) {
        int rowCount = tblBook.getRowCount();
        if (rowCount == 0) {
            XDialog.alert("Không có dữ liệu để di chuyển");
            return;
        }

        if (index < 0) {
            index = rowCount - 1;
        }
        if (index >= rowCount) {
            index = 0;
        }

        tblBook.setRowSelectionInterval(index, index);
        edit();
    }  
    private void addDoubleClickEventToTable() {
    tblBook.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            if (e.getClickCount() == 2) {
                int row = tblBook.getSelectedRow();
                if (row >= 0 && row < items.size()) {
                    Book selectedBook = items.get(row);
                    setForm(selectedBook);
                    setEditable(true);
                }
            }
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChooseFile;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnMoveNext;
    private javax.swing.JButton btnMovePrevious;
    private javax.swing.ButtonGroup btnStatus;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cboCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private poly.book.component.ImageJPanel pnlImageBook;
    private javax.swing.JRadioButton rdoAvailable;
    private javax.swing.JRadioButton rdoUnavailable;
    private javax.swing.JTable tblBook;
    private javax.swing.JTable tblCategory;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookId;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtStockQuantity;
    // End of variables declaration//GEN-END:variables

    public void setBill(Bill bill) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
